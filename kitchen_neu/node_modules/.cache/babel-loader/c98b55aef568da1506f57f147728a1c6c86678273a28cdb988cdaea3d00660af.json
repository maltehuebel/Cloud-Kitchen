{"ast":null,"code":"var _jsxFileName = \"/Users/maltehubel/Documents/Studium/HdM/Semester 1/Cloud Computing/Cloud Kitchen /neuer_versuch/kitchen_neu/src/components/K\\xFCche.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Küche() {\n  _s();\n  const [orders, setOrders] = useState([]); // Zustand für die Bestellungen\n\n  // Diese Funktion ruft die Bestellungen aus der Datenbank ab\n  const fetchOrders = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/orders');\n      if (response.ok) {\n        const data = await response.json();\n        setOrders(data);\n      } else {\n        console.error('Fehler beim Abrufen der Bestellungen:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Fehler beim Abrufen der Bestellungen:', error);\n    }\n  };\n\n  // Verwenden Sie useEffect, um die Bestellungen bei der Montage der Komponente abzurufen\n  useEffect(() => {\n    fetchOrders();\n    // Fügen Sie Abhängigkeiten hinzu, wenn erforderlich\n  }, []); // Das leere Array [] sorgt dafür, dass der Effekt nur einmal ausgeführt wird\n\n  // Funktion zum Markieren einer Bestellung als erledigt\n  const markOrderAsCompleted = async orderId => {\n    try {\n      const response = await fetch(`http://localhost:8080/order/${orderId}/complete`, {\n        method: 'PATCH'\n      });\n      if (response.ok) {\n        // Entfernen Sie die Bestellung aus dem Zustand, um sie aus der Anzeige zu entfernen\n        setOrders(prevOrders => prevOrders.filter(order => order._id !== orderId));\n      } else {\n        console.error('Fehler beim Markieren der Bestellung als erledigt:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Fehler beim Senden der Anfrage:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"K\\xFCche\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: orders.map(order => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [order.details.items && order.details.items.map((item, itemIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [item.amount, \"x \", item.name]\n        }, itemIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => markOrderAsCompleted(order._id),\n          children: \"Erledigt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)]\n      }, order._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(Küche, \"FvMuVccH6DXI6fqfhJiN/VsjZaw=\");\n_c = Küche;\nexport default Küche;\nvar _c;\n$RefreshReg$(_c, \"K\\xFCche\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Küche","_s","orders","setOrders","fetchOrders","response","fetch","ok","data","json","console","error","statusText","markOrderAsCompleted","orderId","method","prevOrders","filter","order","_id","children","fileName","_jsxFileName","lineNumber","columnNumber","map","details","items","item","itemIndex","amount","name","onClick","_c","$RefreshReg$"],"sources":["/Users/maltehubel/Documents/Studium/HdM/Semester 1/Cloud Computing/Cloud Kitchen /neuer_versuch/kitchen_neu/src/components/Küche.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction Küche() {\n  const [orders, setOrders] = useState([]); // Zustand für die Bestellungen\n\n  // Diese Funktion ruft die Bestellungen aus der Datenbank ab\n  const fetchOrders = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/orders');\n      if (response.ok) {\n        const data = await response.json();\n        setOrders(data);\n      } else {\n        console.error('Fehler beim Abrufen der Bestellungen:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Fehler beim Abrufen der Bestellungen:', error);\n    }\n  };\n\n  // Verwenden Sie useEffect, um die Bestellungen bei der Montage der Komponente abzurufen\n  useEffect(() => {\n    fetchOrders();\n    // Fügen Sie Abhängigkeiten hinzu, wenn erforderlich\n  }, []); // Das leere Array [] sorgt dafür, dass der Effekt nur einmal ausgeführt wird\n\n  // Funktion zum Markieren einer Bestellung als erledigt\n  const markOrderAsCompleted = async (orderId) => {\n    try {\n      const response = await fetch(`http://localhost:8080/order/${orderId}/complete`, {\n        method: 'PATCH'\n      });\n      if (response.ok) {\n        // Entfernen Sie die Bestellung aus dem Zustand, um sie aus der Anzeige zu entfernen\n        setOrders((prevOrders) => prevOrders.filter((order) => order._id !== orderId));\n      } else {\n        console.error('Fehler beim Markieren der Bestellung als erledigt:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Fehler beim Senden der Anfrage:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Küche</h1>\n      <ul>\n        {orders.map((order) => (\n          <li key={order._id}>\n            {order.details.items && order.details.items.map((item, itemIndex) => (\n              <div key={itemIndex}>\n                {item.amount}x {item.name}\n              </div>\n            ))}\n            <button onClick={() => markOrderAsCompleted(order._id)}>Erledigt</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Küche;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}